# USAGE
# python social_distance_detector.py --input time-square.mp4
# python social_distance_detector.py --input time-square.mp4 --output output.avi

# import the necessary packages
from pyimagesearch import social_distancing_config as config
from pyimagesearch.detection import detect_people
from scipy.spatial import distance as dist
import numpy as np
import argparse
import imutils
import cv2
import os

# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--input", type=str, default="",
                help="path to (optional) input video file")
ap.add_argument("-o", "--output", type=str, default="",
                help="path to (optional) output video file")
ap.add_argument("-d", "--display", type=int, default=1,
                help="whether or not output frame should be displayed")
args = vars(ap.parse_args())

# load the COCO class labels our YOLO model was trained on
labelsPath = os.path.sep.join([config.MODEL_PATH, "coco.names"])
LABELS = open(labelsPath).read().strip().split("\n")

# derive the paths to the YOLO weights and model configuration
weightsPath = os.path.sep.join([config.MODEL_PATH, "yolov4-tiny.weights"])
configPath = os.path.sep.join([config.MODEL_PATH, "yolov4-tiny.cfg"])

# load our YOLO object detector trained on COCO dataset (80 classes)
print("[INFO] loading YOLO from disk...")
net = cv2.dnn.readNetFromDarknet(configPath, weightsPath)

# check if we are going to use GPU
if config.USE_GPU:
    # set CUDA as the preferable backend and target
    print("[INFO] setting preferable backend and target to CUDA...")
    net.setPreferableBackend(cv2.dnn.DNN_BACKEND_CUDA)
    net.setPreferableTarget(cv2.dnn.DNN_TARGET_CUDA)

# determine only the *output* layer names that we need from YOLO
ln = net.getLayerNames()
ln = [ln[i - 1] for i in net.getUnconnectedOutLayers().flatten()]

# initialize the video stream and pointer to output video file
print("[INFO] accessing video stream...")
vs = cv2.VideoCapture(args["input"] if args["input"] else 0)
if not vs.isOpened():
    print("[ERROR] Cannot open video source!")
    exit()
writer = None

frame_count = 0
skip_frames = 10

src_points = np.array([
    [500, 300],
    [800, 300],
    [900, 600],
    [400, 600]
], dtype="float32")

dst_points = np.array([
    [0, 0],
    [3, 0],
    [3, 4],
    [0, 4]
], dtype="float32")

M = cv2.getPerspectiveTransform(src_points, dst_points)

# loop over the frames from the video stream
while True:
    # read the next frame from the file
    (grabbed, frame) = vs.read()

    # if the frame was not grabbed, then we have reached the end
    # of the stream
    if not grabbed:
        break

    # resize the frame and then detect people (and only people) in it
    frame = imutils.resize(frame, width=700)
    results = detect_people(frame, net, ln,
                            personIdx=LABELS.index("person"))

    # if frame_count % skip_frames == 0:
    #	results = detect_people(frame, net, ln,
    #	personIdx=LABELS.index("person"))
    # frame_count += 1
    # initialize the set of indexes that violate the minimum social
    # distance
    violate = set()

    # ensure there are *at least* two people detections (required in
    # order to compute our pairwise distance maps)
    if len(results) >= 2:
        # extract all centroids from the results and compute the
        # Euclidean distances between all pairs of the centroids
        centroids = np.array([r[2] for r in results], dtype="float32")
        if centroids.ndim == 2:
            centroids = np.expand_dims(centroids, axis=1)
        bird_eye_centroids = cv2.perspectiveTransform(centroids, M)
        D = dist.cdist(bird_eye_centroids[:, 0], bird_eye_centroids[:, 0], metric="euclidean")

        # loop over the upper triangular of the distance matrix
        for i in range(0, D.shape[0]):
            for j in range(i + 1, D.shape[1]):
                # check to see if the distance between any two
                # centroid pairs is less than the configured number
                # of pixels
                if D[i, j] < config.MIN_DISTANCE:
                    # update our violation set with the indexes of
                    # the centroid pairs
                    violate.add(i)
                    violate.add(j)
                # check to see if the distance between any two centroid pairs is less than the configured number of pixels
                if D[i, j] < config.MIN_DISTANCE:
                    # update our violation set with the indexes of the centroid pairs
                    violate.add(i)
                    violate.add(j)

                    # draw a line between the two centroids
                    (cX1, cY1) = results[i][2]
                    (cX2, cY2) = results[j][2]
                    cv2.line(frame, (cX1, cY1), (cX2, cY2), (0, 0, 255), 2)

                    # put the distance text at the midpoint of the line
                    midX, midY = (cX1 + cX2) // 2, (cY1 + cY2) // 2
                    distance_text = "{:.2f}".format(D[i, j])
                    cv2.putText(frame, distance_text, (midX, midY - 10),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)

    # loop over the results
    for (i, (prob, bbox, centroid)) in enumerate(results):
        # extract the bounding box and centroid coordinates, then
        # initialize the color of the annotation
        (startX, startY, endX, endY) = bbox
        (cX, cY) = centroid
        color = (0, 255, 0)

        # if the index pair exists within the violation set, then
        # update the color
        if i in violate:
            color = (0, 0, 255)

        # draw (1) a bounding box around the person and (2) the
        # centroid coordinates of the person,
        cv2.rectangle(frame, (startX, startY), (endX, endY), color, 2)
        cv2.circle(frame, (cX, cY), 5, color, 1)

    # draw the total number of social distancing violations on the
    # output frame
    # text = "Social Distancing Violations: {}".format(len(violate))
    # cv2.putText(frame, text, (10, frame.shape[0] - 25),
    # 	cv2.FONT_HERSHEY_SIMPLEX, 0.85, (0, 0, 255), 3)

    # check to see if the output frame should be displayed to our
    # screen
    if args["display"] > 0:
        # show the output frame
        cv2.imshow("Frame", frame)
        key = cv2.waitKey(1) & 0xFF

        # if the q key was pressed, break from the loop
        if key == ord("q"):
            break

    # if an output video file path has been supplied and the video
    # writer has not been initialized, do so now
    if args["output"] != "" and writer is None:
        # initialize our video writer
        fourcc = cv2.VideoWriter_fourcc(*"MJPG")
        writer = cv2.VideoWriter(args["output"], fourcc, 20,
                                 (frame.shape[1], frame.shape[0]), True)

    # if the video writer is not None, write the frame to the output
    # video file
    if writer is not None:
        writer.write(frame)
vs.release()
if writer is not None:
    writer.release()

cv2.destroyAllWindows()

print("[DEBUG] Frame grabbed:", grabbed)

frame = imutils.resize(frame, width=700)
print("[DEBUG] Frame resized")

results = detect_people(frame, net, ln, personIdx=LABELS.index("person"))
print("[DEBUG] Detection done, found:", len(results))